#!/bin/bash -e

OS_TYPE=$(uname)

if [ "$OS_TYPE" == "Linux" ]; then
    _dotzsh_is_linux=1
    echo "Operating system is Linux"
elif [ "$OS_TYPE" == "Darwin" ]; then
    echo "Operating system is MacOS($OS_TYPE)"
else
    echo "Unknown operating system: $OS_TYPE"
    return 1
fi

_dotzsh_cmd_exists() {
    command -v "$@" &>/dev/null
}

real_location="$(readlink -f "$0" 2>/dev/null || readlink "$0" 2>/dev/null || echo "$0")"
current_dir=`cd $(dirname "$real_location");pwd`
generate_file=$current_dir/common.sh

cat > $generate_file << 'EOF'
cmd_exists() {
    command -v "$@" &>/dev/null
}
## about git stash
shpo() {
    git stash pop stash@{$1};
}
shap() {
    git stash apply stash@{$1};
}
shsw() {
    git stash show -p stash@{$1};
}
shdr() {
    git stash drop stash@{$1};
}
## get pid of a process, avoid some Linux system cannot use 'pgrep' program
qpid() {
    ps -eo pid,cmd | grep "$1" | grep -vE 'grep|\]$' | awk '{print$1;}'
}
## print all info, and search insensitive
ppre() {
    ps -ef | grep -i "$1" | grep -vE 'grep|\]$'
}
htdel() {
    # set -x
    if [[ -n "$HISTFILE" ]]; then
        local file=$HISTFILE
    elif [[ -n "$ZSH_VERSION" ]] && [ -e ~/.zhistory ]; then
        local file=~/.zhistory
    elif [[ -n "$BASH_VERSION" ]] && [ -e ~/.bash_history ]; then
        local file=~/.bash_history
    else
        return 1
    fi

    if [[ "$1" =~ "/" ]]; then
        transfer=`printf "$1" | sed 's#\/#\\\/#g'`
        sed -i "/$transfer/d" $file
    else
        sed -i "/$1/d" $file
    fi
}
## quickly update(rebase) git repo between local and all remotes
gitur() {
    # set -x
    git add `git status -s | grep -vE '^\?\?|  ' | awk '{print$2;}'`
    [ $? -eq 0 ] || return 1

    git commit
    if ! git pull --rebase; then
        echo 'handle conflicts first!'
        return 1
    fi

    remote_arr=(`git remote`)
    for var in ${remote_arr[*]}; do
        git push --all $var
    done
}
dkcid() {
    docker ps -qf "name= $1\$"
}
dktty() {
    ctner_count=`dkcid $1 | wc -l`
    if [ $ctner_count -ne 1 ]; then
        echo "ERROR: $ctner_count container(s) found, cannot exec shell!";
        return 1
    fi
    shell_arr=("bash" "sh" "zsh" "fish" "ash")
    for var in ${shell_arr[*]}; do
        docker exec -ti $1 /bin/$var -i && return 0
    done
}
qip() {
    curl -S ip-api.com/json/$1 2>/dev/null | jq '.'
}
cdt() {
    if [[ ! -e $1 ]]; then
        echo "Error: The file or directory does not exist."
        return 1
    fi

    if [[ -d $1 ]]; then
        cd "$1"
    elif [[ -f $1 ]]; then
        cd "$(dirname "$1")"
    else
        echo "Error: Not a file or directory."
        return 1
    fi
}
upd() {
    local dir=""
    local limit="$1"
    for ((i=1; i <= limit; i++)); do
        dir="../$dir"
    done
    cd "$dir"
}
swap2file() {
    if [[ ! -f "$1" || ! -f "$2" ]]; then
        echo "$1 or $2 is not existed." >&2
        exit 1
    fi

    if [[ "$1" -ef "$2" ]]; then
        echo "$1 and $2 is same file" >&2
        exit 2
    fi

    tempfile=`mktemp ./swap2file.$$.XXXXXXXXXX`
    mv "$1" $tempfile
    mv "$2" "$1"
    mv $tempfile "$2"
}
## TODO: awk sed readlink?
## get real network device local ipv4 address, TODO: use jq?
rlip4() {
    ip -o -4 addr list | grep -Ev '\s(docker|lo)' | awk '{printf"%-20s %s\n",$2,$4}'
}

## about bash prompt
_get_short_pwd() {
    split=5
    W=$(pwd | sed -e "s!$HOME!~!")
    total_cnt=$(echo $W | grep -o '/' | wc -l)
    last_cnt=$(($total_cnt-1))
    if [ $total_cnt -gt $split ]; then
        echo $W | cut -d/ -f1-2 | xargs -I{} echo {}"/â€¦/$(echo $W | cut -d/ -f${last_cnt}-)"
    else
        echo $W
    fi
}

_get_jobs_name() {
    local job_arr=(`jobs | tr -d '+' | awk '$2 == "Stopped" || $2 == "suspended" {print$3}'`)
    local content=
    for var in ${job_arr[*]}; do
        content="${content}%${var} "
    done
    echo "${content}"
}

_bash_prompt_cmd() {
    [[ $? -eq 0 ]] && local promFg="92" || local promFg="91"
    local shortPwd=`_get_short_pwd`
    local jobIdx=`_get_jobs_name`
    PS1="\[\e[0m\]\[\033[0;32m\]\A \[\e[0;36m\]${shortPwd} \[\e[0;34m\]${jobIdx}\[\e[0m\]\[\e[0;${promFg}m\]\\$\[\e[0m\] "
}

## ----------------------- alias ---------------------- {{{1
## git
alias gta="git status"
alias gts="git status -s"
alias gtun="git status uno"

alias gcm="git commit"
alias gcmm="git commit -m"
alias gcma="git commit -a"
alias gcmam="git commit -a -m"
alias gcmn="git commit --amend"
alias gcman="git commit -a --amend"

alias gpl="git pull"
alias gplrb="git pull --rebase"

alias gsh="git stash"
alias gshl="git stash list"
alias gshp="git stash pop"

alias grs="git reset"
alias grsh="git reset --hard"
alias grss="git reset --soft"
alias gro="git restore"
alias grog="git restore --staged"

alias glg="git log --pretty=format:'%Cred%h%Creset %Cgreen(%ad) %Creset%s %C(bold blue)<%an>%Creset%C(yellow)%d' --date=format:'%Y-%m-%d %H:%M' --abbrev-commit --color"
alias glp="glg --graph"
alias glh="glp | head -30"

alias gdf="git diff"
alias gdfh="git diff HEAD"
alias gdfc="git diff --cached"
alias gbr="git branch"
alias gba="git branch -a"
alias gtl="git tag --list"
alias gck="git checkout"
alias grt="git remote -v"
alias gblm="git blame -L"
alias gaprj="git apply --reject"

alias gchp="git cherry-pick"
alias gcln="git clean -n"
alias gclfd="git clean -fd"
## tar
alias tarx="tar --no-same-owner -xf"
alias tarz="tar zcf"
alias tarj="tar jcf"

## other shell
alias r="fc -s"
alias pingk="ping -c4"
alias gdb="gdb -q"
alias cp="cp -arvf"
alias mv="mv -v"
alias sln="ln -sfv"
alias less="less -R"
alias df="df -h -T"
alias free="free -h"
alias rrm="\rm -rf"
alias grep="grep --color=auto"
alias diff="diff --color=auto"
alias pipins="pip install -i https://pypi.tuna.tsinghua.edu.cn/simple"
alias surl="curl --proto '=https' --tlsv1.2 -LSv"

## about env:PS1(PROMPT), PS2, PS4
_PRE=$'\E['

PS2="${_PRE}0;33m>${_PRE}0m"
PS4="${_PRE}1;2m+${_PRE}0;33m$0:${_PRE}0;92m$LINENO${_PRE}m${_PRE}1;2m> ${_PRE}m"
unset _PRE

if [[ -n "$BASH_VERSION" ]]; then
    PROMPT_COMMAND=_bash_prompt_cmd
    HISTCONTROL=ignoreboth
    shopt -s histappend
    shopt -s autocd
    shopt -s checkwinsize
    shopt -s expand_aliases
    export HISTTIMEFORMAT='%F %T '
fi

## ----------------------- conditional shell function ----------------------
EOF

if which -v &>/dev/null; then
    cat >> $generate_file << 'EOF'
## final location of which command
fwh() {
    local yellow=$'\E[0;33m'
    local reset=$'\E[m'
    local whi=`\which $1 2>/dev/null`
    # is aliased to?
    if echo $whi | grep -q ' aliased '; then
        local real_cmd=`echo $whi | cut -d' ' -f4`
        local argu="`echo $whi | cut -d' ' -f5-`"
        if [[ "$1" == "$real_cmd" ]]; then
            [ -x /bin/$real_cmd ] && echo "/bin/$real_cmd ${yellow}with arguments:${reset} $argu $2"
        else
            fwh $real_cmd "$argu $2"
        fi
    else
        if [ -x ${whi} 2>/dev/null ]; then
            readlink -f ${whi} | xargs -I{} echo {} `test -n "$2" && echo "with arguments: $2"`
        elif echo $whi | grep -qE '}$'; then # shell function
            type $1
            echo "$whi"
        elif echo $whi | grep -q 'built-in'; then # shell built-in
            echo -e "${yellow}$whi${reset}"
        else
            echo -e "ERROR\n $whi"
        fi
    fi
}

EOF
fi

if [ -n "$_dotzsh_is_linux" ] && _dotzsh_cmd_exists ldd; then
    cat >> $generate_file << 'EOF'
qlibc() {
    strings $1 | grep -E '^GLIBC_'
}
EOF
fi

if _dotzsh_cmd_exists journalctl; then
    cat >> $generate_file << 'EOF'
jnl() {
    journalctl -eu $1 | less +G
}
jfxeu() {
    journalctl -n 100 -fxeu $1
}

EOF
else # macOS
    cat >> $generate_file << 'EOF'
jnl() {
    log show --predicate "process == \"$1\"" --info --last 1d
}

EOF
fi

if _dotzsh_cmd_exists pigz; then
    cat >> $generate_file << 'EOF'
## tar compress/uncompress gzip with pigz
tcpzf() {
    tar cf - $2 | pigz --fast > $1
}
txpz() {
    tar --no-same-owner -xf $1 -I pigz
}
EOF
fi

if _dotzsh_cmd_exists rsync; then
    cat >> $generate_file << 'EOF'
cpv() {
    rsync -pogbr -hhh --backup-dir="/tmp/rsync-${USERNAME}" -e /dev/null --progress "$@"
}
EOF
fi

if _dotzsh_cmd_exists du; then
    if du --apparent-size /dev/null &>/dev/null; then
        cat >> $generate_file << 'EOF'
dus() {
    du --apparent-size -alh -d1 $1 | sort -rh | head -n 21
}

EOF
    else
        cat >> $generate_file << 'EOF'
dus() {
    du -alh -d1 $1 | sort -rh | head -n 21
}

EOF
    fi
fi


if _dotzsh_cmd_exists systemctl; then
    cat >> $generate_file << 'EOF'
## systemctl
alias syta="systemctl status"
alias syca="systemctl cat"
alias syst="sudo systemctl start"
alias syrs="sudo systemctl restart"
alias syte="sudo systemctl stop"
alias syrld="sudo systemctl reload"
alias syen="sudo systemctl enable"
alias syed="sudo systemctl edit"
alias syenw="sudo systemctl enable --now"
alias sydis="sudo systemctl disable"
alias sydisw="sudo systemctl disable --now"
alias sydrld="sudo systemctl daemon-reload"

EOF
elif _dotzsh_cmd_exists launchctl; then
    cat >> $generate_file << 'EOF'
alias syst="sudo launchctl start"
alias syte="sudo launchctl stop"
alias syen="sudo launchctl load"
alias syenw="sudo launchctl load -w"
alias sydis="sudo launchctl unload"
alias sydisw="sudo launchctl unload -w"

alias bsst="brew services start"
alias bste="brew services stop"
alias bsrs="brew services restart"
alias bsls="brew services list"
alias bsinf="brew services info --all"

syrs() {
    sudo launchctl stop $1 && sudo launchctl start $1
}
syss() {
    launchctl list | grep -i $1 | awk '{print$3;}'
}

EOF
fi

if _dotzsh_cmd_exists ninja; then
    cat >> $generate_file << 'EOF'
## cmake
export BUILD_DIR=./build

alias cmkln="\rm -rf ${BUILD_DIR}/CMake{Cache.txt,Files}"
alias cmkr="cmake -B${BUILD_DIR} -G Ninja -DCMAKE_BUILD_TYPE=Release"
alias cmkd="cmake -B${BUILD_DIR} -G Ninja -DCMAKE_BUILD_TYPE=Debug"
alias cmba="cmake --build ${BUILD_DIR}"
alias cmbt="cmake --build ${BUILD_DIR} -t"

EOF
else
    cat >> $generate_file << 'EOF'
export BUILD_DIR=./build

alias cmkln="\rm -rf ${BUILD_DIR}/CMake{Cache.txt,Files}"
alias cmkr="cmake -B${BUILD_DIR} -DCMAKE_BUILD_TYPE=Release"
alias cmkd="cmake -B${BUILD_DIR} -DCMAKE_BUILD_TYPE=Debug"
alias cmba="cmake --build ${BUILD_DIR}"
alias cmbt="cmake --build ${BUILD_DIR} -t"

EOF
fi

## dpz in 'if' is same to 'else' part
if _dotzsh_cmd_exists perl; then
    cat >> $generate_file << 'EOF'
## docker ps
alias dps="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}' | perl -pe 's/, :::.*?p//g'"
alias dpz="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Size}}'"

EOF
else 
    cat >> $generate_file << 'EOF'
## docker ps
alias dps="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'"
alias dpz="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Size}}'"

EOF
fi

if _dotzsh_cmd_exists pacman; then
    if _dotzsh_cmd_exists yay; then
        _cmd=yay
    elif _dotzsh_cmd_exists paru; then
        _cmd=paru
    else
        _cmd=pacman
    fi
    cat >> $generate_file << EOF
alias pkgsy="$_cmd -Sy"
alias pkgr="$_cmd -R"
alias pkgssq="$_cmd -Ssq"
alias pkgss="$_cmd -Ss"
alias pkgsi="$_cmd -Si"
alias pkgqs="$_cmd -Qs"
alias pkgqi="$_cmd -Qi"
alias pkgql="$_cmd -Ql"
alias pkgqo="$_cmd -Qo"

EOF
elif _dotzsh_cmd_exists apt; then
    _cmd=apt
    # TODO
#     cat >> $generate_file << EOF
# EOF
elif _dotzsh_cmd_exists brew; then
    _cmd=brew
    cat >> $generate_file << EOF
alias pkgsy="$_cmd install"
alias pkgcsy="$_cmd install --cask"
alias pkgr="$_cmd uninstall"
alias pkgcr="$_cmd uninstall --cask"
alias pkgss="$_cmd search"
alias pkgsi="$_cmd info"
alias pkgls="$_cmd list"
alias pkgdep="$_cmd deps"

EOF
fi

if _dotzsh_cmd_exists eza; then
    eza_al='alias ls="eza --group-directories-first -A"'

    if eza --git /dev/null &>/dev/null; then
        eza_al+=$'\nalias ll="ls -blg --git"'     # Long format, git status
    else
        eza_al+=$'\nalias ll="ls -blg"'
    fi
    eza_al+=$'\nalias l="ll -B"               # Long format, Byte size'
    eza_al+=$'\nalias la="ll -a"              # Long format, all files'
    eza_al+=$'\nalias lr="ll -T"              # Long format, recursive as a tree'
    eza_al+=$'\nalias lx="ll -sextension"     # Long format, sort by extension'
    eza_al+=$'\nalias lk="ll -ssize"          # Long format, largest file size last'
    eza_al+=$'\nalias lt="ll -smodified"      # Long format, newest modification time last'
    eza_al+=$'\nalias lc="ll -schanged"       # Long format, newest status change (ctime) last'

    cat >> $generate_file << EOF
$eza_al
EOF

else
    if ls --color=auto /dev/null &>/dev/null; then
        cat >> $generate_file << 'EOF'
[[ -z "$LS_OPTIONS" ]] && export LS_OPTIONS="--color=auto"
alias ls="ls -A $LS_OPTIONS"
alias ll="ls -AlFh"
alias l="ls -AlF"
alias la="ls -alF"

EOF
    else
        cat >> $generate_file << 'EOF'
alias ls="ls -A"
alias ll="ls -AlFh"
alias l="ls -AlF"
alias la="ls -alF"

EOF
    fi
fi

some_al=''
if _dotzsh_cmd_exists trash; then
    some_al+=$'\nalias rm="trash"'
fi

if _dotzsh_cmd_exists xclip; then
    some_al+=$'\nalias pbcopy="xclip -selection clipboard"\nalias pbpaste="xclip -selection clipboard -o"'
fi

if _dotzsh_cmd_exists fd; then
    some_al+=$'\nalias fdf="fd -t f -H -I --exclude={.git,.svn,.vscode,.vs,.vscode-server,.idea,.github,node_modules,target,build,dist}"'
fi

if _dotzsh_cmd_exists fzf && _dotzsh_cmd_exists bat; then
    some_al+=$'\nalias fzf="fzf --preview '\''bat --color=always --style=header,grid --line-range :500 {}'\''"'
fi

if _dotzsh_cmd_exists tree; then
    some_al+=$'\nalias trelh="tree -AlFh"\nalias treds="tree -hF --du --sort=size | more"'
fi

if _dotzsh_cmd_exists dust; then
    some_al+=$'\nalias dur="dust -sr"\nalias durd="dust -srb -d 1"'
fi
cat >> $generate_file << EOF
$some_al

EOF

unset OS_TYPE _dotzsh_is_linux real_location current_dir generate_file _cmd eza_al some_al

# vim:fdm=marker
