#!/bin/bash -e

OS_TYPE=$(uname)

if [ "$OS_TYPE" == "Linux" ]; then
    _dotzsh_is_linux=1
    echo "Operating system is Linux"
elif [ "$OS_TYPE" == "Darwin" ]; then
    echo "Operating system is MacOS($OS_TYPE)"
else
    echo "Unknown operating system: $OS_TYPE"
    return 1
fi

_dotzsh_cmd_exists() {
    command -v "$@" &>/dev/null
}

real_location="$(readlink -f "$0" 2>/dev/null || readlink "$0" 2>/dev/null || echo "$0")"
current_dir=`cd $(dirname "$real_location");pwd`
full_filename=`echo ${real_location##*/}`
strip_in_name=`echo ${full_filename%.*}`
generate_file=${current_dir}/${strip_in_name}

echo "generate_file:${generate_file}"

cat > $generate_file << 'EOF'
cmd_exists() {
    command -v "$@" &>/dev/null
}
## about git stash
shpo() {
    git stash pop stash@{$1};
}
shap() {
    git stash apply stash@{$1};
}
shsw() {
    git stash show -p stash@{$1};
}
shdr() {
    git stash drop stash@{$1};
}
## get pid of a process, avoid some Linux system cannot use 'pgrep' program
qpid() {
    ps -eo pid,cmd | grep "$1" | grep -vE 'grep|\]$' | awk '{print$1;}'
}
## print all info, and search insensitive
ppre() {
    ps -ef | grep -i "$1" | grep -vE 'grep|\]$'
}
htdel() {
    # set -x
    if [[ -n "$HISTFILE" ]]; then
        local file=$HISTFILE
    elif [[ -n "$ZSH_VERSION" ]] && [ -e ~/.zhistory ]; then
        local file=~/.zhistory
    elif [[ -n "$BASH_VERSION" ]] && [ -e ~/.bash_history ]; then
        local file=~/.bash_history
    else
        return 1
    fi

    grep -rn $1 $file
    if [[ "$1" =~ "/" ]]; then
        transfer=`printf "$1" | sed 's#\/#\\\/#g'`
        sed -i "/$transfer/d" $file
    else
        sed -i "/$1/d" $file
    fi
}
## quickly update(rebase) git repo between local and all remotes
gitur() {
    # set -x
    git add `git status -s | grep -vE '^\?\?|  ' | awk '{print$2;}'`
    [ $? -eq 0 ] || return 1

    git commit
    if ! git pull --rebase; then
        echo 'handle conflicts first!'
        return 1
    fi

    remote_arr=(`git remote`)
    for var in ${remote_arr[*]}; do
        git push --all $var
    done
}
## List all untracked files/directories in current git repo and decide whether to delete it.
gcldi() {
    local untracked_files=`git ls-files --directory --others`
    if [[ ${#untracked_files[@]} -eq 0 ]]; then
        echo "No untracked files or directories found."
        return 0
    fi

    echo "The following files/directories are untracked:"
    printf '%s%s%s\n' $'\E[0;33m' "${untracked_files[@]}" $'\E[m'
    # echo ""

    ## Ask for confirmation
    printf "Do you want to delete all these untracked files/directories? [y/N] "
    read answer
    case "$answer" in
        [yY][eE][sS]|[yY])
            git ls-files --directory --others | xargs rm -rf
            echo "Deletion completed."
            ;;
        *)
            echo "Operation cancelled."
            ;;
    esac
}
cdt() {
    if [[ ! -e $1 ]]; then
        echo "Error: The file or directory does not exist."
        return 1
    fi
    if [[ -d $1 ]]; then
        cd "$1"
    elif [[ -f $1 ]]; then
        cd "$(dirname "$1")"
    else
        echo "Error: Not a file or directory."
        return 1
    fi
}
upd() {
    local dir=""
    local limit="$1"
    for ((i=1; i <= limit; i++)); do
        dir="../$dir"
    done
    cd "$dir"
}
swap2file() {
    if [[ ! -f "$1" || ! -f "$2" ]]; then
        echo "$1 or $2 is not existed." >&2
        exit 1
    fi

    if [[ "$1" -ef "$2" ]]; then
        echo "$1 and $2 is same file" >&2
        exit 2
    fi

    tempfile=`mktemp ./swap2file.$$.XXXXXXXXXX`
    mv "$1" $tempfile
    mv "$2" "$1"
    mv $tempfile "$2"
}
## TODO: awk sed readlink?

## about docker ---------- [[[
dkcid() {
    docker ps -qf "name= $1\$"
}
get_docker_shell() {
    local container="$1"
    ## Set priority list
    local preferred_order=("/bin/bash" "/bin/zsh" "/bin/sh" "/usr/bin/bash" "/usr/bin/zsh")
    local shells=$(docker exec "$container" sh -c 'cat /etc/shells 2>/dev/null' 2>/dev/null)

    if [ $? -eq 0 ] && [ -n "$shells" ]; then
        local valid_shells
        valid_shells=$(echo "$shells" | grep -E '^/' | grep -v '#')

        ## Check the first shell in order of priority list
        for shell in "${preferred_order[@]}"; do
            if echo "$valid_shells" | grep -q "^${shell}$"; then
                echo "$shell"
                return 0
            fi
        done
    fi

    ## /etc/shells not available
    docker exec "$container" sh -c '
    if command -v bash >/dev/null 2>&1; then
        echo "/bin/bash"
    elif command -v sh >/dev/null 2>&1; then
        echo "/bin/sh"
    elif command -v zsh >/dev/null 2>&1; then
        echo "/bin/zsh"
    else
        echo "unknown"
    fi
    ' 2>/dev/null
}
dkex() {
    container="$1"
    shell_path=$(get_docker_shell "$container")

    if [ "$shell_path" = "unknown" ]; then
        echo "ERROR: No valid shell found in $container"
        exit 1
    else
        docker exec -it "$container" "$shell_path"
    fi
}
## about docker ---------- ]]]

## fwh v2.1 ---------- [[[
_fwh_judge_built_in_or_abs_path() {
    local cmd_path=$(command -v -- "$1")
    if [[ $? -ne 0 ]]; then
        echo "Error: Command '$cmd' not found" >&2
        return 1
    fi
    if type -- "$cmd_path" | grep -Eq 'shell built-in'; then
        printf "(%s:shell built-in)\n" $cmd_path
    # else
    #     printf "(%s:%s)\n" $1 $cmd_path
    fi
    # if [[ "${cmd_path}" =~ "/" ]]; then
}
_fwh_resolve_alias() {
    local cmd="$1"
    ## Get alias (remove all quotes)
    ## TODO: [WARNING] sed will remove unexpect quote(s)
    local alias_def=`alias -- "$cmd" 2>/dev/null | sed -E "s/alias ${cmd}='(.*)'/\1/; s/'\\''/'/g" | tr -d "'"`
    if [[ -n "${alias_def}" ]]; then
        local trimmed_equal_sign=`echo ${alias_def#*=}`
        local pointed_cmd=`echo "$trimmed_equal_sign" | awk '{print $1}'`
        ## Recursive resolve the pointed word
        if [[ -n "$pointed_cmd" ]]; then
            echo "$alias_def"
            if [ "$pointed_cmd" != "$cmd" ]; then
                _fwh_resolve_alias "$pointed_cmd"
            else
                _fwh_judge_built_in_or_abs_path "$cmd"
            fi
        fi
    else
        _fwh_judge_built_in_or_abs_path "$cmd"
    fi
}

_fwh_resolve_func() {
    local cmd="$1"
    local func_def=`declare -f -- "$cmd" 2>/dev/null` || {
        echo "Error: Function '$cmd' not found" >&2
        return 1
    }
    ## Get define location
    # local src_info=`declare -F -- "$cmd" | awk '{printf "Defined in %s (line %d)", $3, $2}'`
    local src_info=`type -- "$cmd"`
    echo "[Function]: $src_info"
    echo "Definition: ↴"
    echo $func_def
}

_fwh_resolve_exec() {
    local cmd="$1"
    local initial_path=`command -v -- "$cmd"` || {
        echo "Error: Command '$cmd' not found" >&2
        return 1
    }

    if type -- "$initial_path" | grep -Eq 'shell built-in'; then
        printf "(%s:shell built-in)\n" $initial_path
        return 0
    else
        printf "(%s:%s)\n" $1 $initial_path
    fi
    local temp_path=$initial_path
    ## Follow soft link
    while [[ -L "$temp_path" ]]; do
        local target=$(readlink -- "$temp_path")
        temp_path=$(realpath -- "$temp_path")
        printf "  Symbolic link to: %s\n" $target
    done

    if type -- "$temp_path" | grep -Eq 'shell built-in'; then
        printf "(%s:shell built-in)\n" $temp_path
        return 0
    fi

    if [ "$initial_path" != "$temp_path" ]; then
        printf "Final target: %s\n" "$temp_path"
    fi
}

fwh() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: ${0##*/} <command>" >&2
        return 1
    fi
    local cmd="$1"

    if alias -- "$cmd" &>/dev/null; then
        echo "[Alias]"
        _fwh_resolve_alias "$cmd"
    elif declare -f -- "$cmd" &>/dev/null; then
        _fwh_resolve_func "$cmd"
    elif cmd_exists "$cmd"; then
        _fwh_resolve_exec "$cmd"
    else
        echo "Error: '$cmd' is not recognized" >&2
        return 1
    fi
}
## fwh ---------- }}


## about bash prompt
_get_short_pwd() {
    split=5
    W=$(pwd | sed -e "s!$HOME!~!")
    total_cnt=$(echo $W | grep -o '/' | wc -l)
    last_cnt=$(($total_cnt-1))
    if [ $total_cnt -gt $split ]; then
        echo $W | cut -d/ -f1-2 | xargs -I{} echo {}"/…/$(echo $W | cut -d/ -f${last_cnt}-)"
    else
        echo $W
    fi
}

_get_jobs_name() {
    local job_arr=(`jobs | tr -d '+' | awk '$2 == "Stopped" || $2 == "suspended" {print$3}'`)
    local content=
    for var in ${job_arr[*]}; do
        content="${content}%${var} "
    done
    echo "${content}"
}

_bash_prompt_cmd() {
    [[ $? -eq 0 ]] && local promFg="92" || local promFg="91"
    local shortPwd=`_get_short_pwd`
    local jobIdx=`_get_jobs_name`
    PS1="\[\e[0m\]\[\033[0;32m\]\A \[\e[0;36m\]${shortPwd} \[\e[0;34m\]${jobIdx}\[\e[0m\]\[\e[0;${promFg}m\]\\$\[\e[0m\] "
}

## ----------------------- alias ---------------------- [[[1
## git
alias gta="git status"
alias gts="git status -s"
alias gtun="git status uno"

alias gcm="git commit"
alias gcmm="git commit -m"
alias gcma="git commit -a"
alias gcmam="git commit -a -m"
alias gcmn="git commit --amend"
alias gcman="git commit -a --amend"

alias gpl="git pull"
alias gplrb="git pull --rebase"

alias gsh="git stash"
alias gshl="git stash list"
alias gshp="git stash pop"

alias grs="git reset"
alias grsh="git reset --hard"
alias grss="git reset --soft"
alias gro="git restore"
alias grog="git restore --staged"

alias glg="git log --pretty=format:'%Cred%h%Creset %Cgreen(%ad) %Creset%s %C(bold blue)<%an>%Creset%C(yellow)%d' --date=format:'%Y-%m-%d %H:%M' --abbrev-commit --color"
alias glp="glg --graph"
alias glh="glp | head -30"

alias gdf="git diff"
alias gdfh="git diff HEAD"
alias gdfc="git diff --cached"
alias gbr="git branch -v"
alias gba="git branch -a -v"
alias gtl="git tag --list"
alias gck="git checkout"
alias grt="git remote -v"
alias gblm="git blame -L"
alias gaprj="git apply --reject"

alias gchp="git cherry-pick"

alias gklrj="git clone --recursive --jobs 8"

alias gcln="git clean -n"
alias gclfd="git clean -fd"

## tar
alias tarx="tar --no-same-owner -xf"
alias tarz="tar zcf"
alias tarj="tar jcf"
alias tarsc1="tar --no-same-owner --strip-components=1 -xf"

## other shell
alias r="fc -s"
alias pingk="ping -c4"
alias cp="cp -Rvf"
alias mv="mv -v"
alias sln="ln -sfnv"
alias less="less -R"
alias df="df -h -T"
alias rrm="\rm -rf"
alias grep="\grep --color=auto"
alias diff="\diff --color=auto"
alias pipins="pip install -i https://pypi.tuna.tsinghua.edu.cn/simple"
alias surl="curl --proto '=https' --tlsv1.2 -LSv"
surs() {
    curl --proto '=https' --tlsv1.2 -LSv https://"$1"
}
## ----------------------- alias ---------------------- ]]]

## about env:PS1(PROMPT), PS2, PS4
_PRE=$'\E['

PS2="${_PRE}0;33m>${_PRE}0m"
PS4="${_PRE}1;2m+${_PRE}0;33m$0:${_PRE}0;92m$LINENO${_PRE}m${_PRE}1;2m> ${_PRE}m"
unset _PRE

if [[ -n "$BASH_VERSION" ]]; then
    PROMPT_COMMAND=_bash_prompt_cmd
    HISTCONTROL=ignoreboth
    shopt -s histappend
    shopt -s autocd
    shopt -s checkwinsize
    shopt -s expand_aliases
    export HISTTIMEFORMAT='%F %T '
fi

## ----------------------- conditional shell function ----------------------
EOF

if _dotzsh_cmd_exists jq; then
    cat >> $generate_file << 'EOF'
qip() {
    curl -S ip-api.com/json/$1 2>/dev/null | jq '.'
}

rlip4() {
    ip -j addr | jq -r '.[] | select(.ifname | test("^lo|^br|^docker|^tun|^utun") | not) | select(.addr_info != null) | .addr_info[] | select(.family=="inet")'
}

rlip6() {
    ip -j addr | jq -r '.[] | select(.ifname | test("^lo|^br|^docker|^tun|^utun") | not) | select(.addr_info != null) | .addr_info[] | select(.family=="inet6" and (.local | startswith("fe80:") | not)) | .local'
}

EOF
else
    cat >> $generate_file << 'EOF'
qip() {
    curl -S ip-api.com/json/$1 2>/dev/null
}

EOF
    if [ -n "$_dotzsh_is_linux" ]; then
        cat >> $generate_file << 'EOF'
rlip4() {
    ip -o -4 addr list | grep -Ev '\s(docker|lo|tun)' | awk '{printf"%-20s %s\n",$2,$4}'
}
EOF
    fi
fi

if [ -n "$_dotzsh_is_linux" ] && _dotzsh_cmd_exists ldd; then
    cat >> $generate_file << 'EOF'
qlibc() {
    strings $1 | grep -E '^GLIBC_'
}
EOF
fi

if _dotzsh_cmd_exists journalctl; then
    cat >> $generate_file << 'EOF'
jnl() {
    journalctl -eu $1 | less +G
}
jfxeu() {
    journalctl -n 100 -fxeu $1
}

EOF
else # macOS
    cat >> $generate_file << 'EOF'
jnl() {
    log show --predicate "process == \"$1\"" --info --last 1d
}

EOF
fi

if _dotzsh_cmd_exists pigz; then
    cat >> $generate_file << 'EOF'
## tar compress/uncompress gzip with pigz
tcpzf() {
    tar cf - $2 | pigz --fast > $1
}
txpz() {
    tar --no-same-owner -xf $1 -I pigz
}
EOF
fi

if _dotzsh_cmd_exists rsync; then
    cat >> $generate_file << 'EOF'
cpv() {
    rsync -pogbr -hhh --backup-dir="/tmp/rsync-${USERNAME}" -e /dev/null --progress "$@"
}
EOF
fi

if _dotzsh_cmd_exists du; then
    if [ -n "$_dotzsh_is_linux" ]; then
        if du --apparent-size /dev/null &>/dev/null; then
            cat >> $generate_file << 'EOF'
dus() {
    du --apparent-size -alh -d1 $1 | sort -rh | head -n 21
}

EOF
        else
            cat >> $generate_file << 'EOF'
dus() {
    du -alh -d1 $1 | sort -rh | head -n 21
}

EOF
        fi
    else # darwin system
        cat >> $generate_file << 'EOF'
dus() {
    du -Alh -d1 $1 | sort -rh | head -n 21
}

rspid() {
    procs --no-header --only PID "$1" | xargs -n 1
}

EOF
    fi

fi


if _dotzsh_cmd_exists systemctl; then
    cat >> $generate_file << 'EOF'
## systemctl
alias syta="systemctl status"
alias syca="systemctl cat"
alias syst="sudo systemctl start"
alias syrs="sudo systemctl restart"
alias syte="sudo systemctl stop"
alias syrld="sudo systemctl reload"
alias syen="sudo systemctl enable"
alias syed="sudo systemctl edit"
alias syenw="sudo systemctl enable --now"
alias sydis="sudo systemctl disable"
alias sydisw="sudo systemctl disable --now"
alias sydr="sudo systemctl daemon-reload"

EOF
elif _dotzsh_cmd_exists launchctl; then
    cat >> $generate_file << 'EOF'
alias syst="sudo launchctl start"
alias syte="sudo launchctl stop"
alias syenw="sudo launchctl load -w"
alias sydisw="sudo launchctl unload -w"

alias bsst="brew services start"
alias bste="brew services stop"
alias bsrs="brew services restart"
alias bsls="brew services list"
alias bsinf="brew services info --all"

syuss() {
    sudo launchctl list | grep -i $1 | awk '{print$3;}'
}
syss() {
    launchctl list | grep -i $1 | awk '{print$3;}'
}
syspr() {
    local srv_target=`syuss ${1}`
    [[ -n "${srv_target}" ]] && launchctl print system/${srv_target} || echo 'None service target'
}
sygpr() {
    local uid=`id -u`
    local srv_target=`syss ${1}`
    [[ -n "${srv_target}" ]] && launchctl print gui/${uid}/${srv_target} || echo 'None service target'
}

EOF
fi

## TODO
if _dotzsh_cmd_exists supervisorctl; then
    cat >> $generate_file << 'EOF'
alias svta="sudo supervisorctl status"
alias svst="sudo supervisorctl start"
alias svrs="sudo supervisorctl restart"
alias svte="sudo supervisorctl stop"
alias svupd="sudo supervisorctl update"

EOF
fi

if _dotzsh_cmd_exists ninja; then
    cat >> $generate_file << 'EOF'
## cmake
export BUILD_DIR=./build

alias cmkln="\rm -rf ${BUILD_DIR}/CMake{Cache.txt,Files}"
alias cmkr="cmake -B${BUILD_DIR} -G Ninja -DCMAKE_BUILD_TYPE=Release"
alias cmkd="cmake -B${BUILD_DIR} -G Ninja -DCMAKE_BUILD_TYPE=Debug"
alias cmba="cmake --build ${BUILD_DIR}"
alias cmbt="cmake --build ${BUILD_DIR} -t"

EOF
else
    cat >> $generate_file << 'EOF'
export BUILD_DIR=./build

alias cmkln="\rm -rf ${BUILD_DIR}/CMake{Cache.txt,Files}"
alias cmkr="cmake -B${BUILD_DIR} -DCMAKE_BUILD_TYPE=Release"
alias cmkd="cmake -B${BUILD_DIR} -DCMAKE_BUILD_TYPE=Debug"
alias cmba="cmake --build ${BUILD_DIR}"
alias cmbt="cmake --build ${BUILD_DIR} -t"

EOF
fi

cat >> $generate_file << 'EOF'

alias dpz="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Size}}'"
EOF

if _dotzsh_cmd_exists perl; then
    cat >> $generate_file << 'EOF'
alias dps="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}' | perl -pe 's/0.0.0.0.*?,//g'"
alias dpa="docker ps -a --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}' | perl -pe 's/0.0.0.0.*?,//g'"

EOF
else
    cat >> $generate_file << 'EOF'
alias dps="docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'"
alias dpa="docker ps -a --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'"

EOF
fi

## eza/ls [[[
if _dotzsh_cmd_exists eza; then
    eza_al='alias ls="eza --group-directories-first -A"'

    if eza --git /dev/null &>/dev/null; then
        eza_al+=$'\nalias ll="ls -blg --git"'     # Long format, git status
    else
        eza_al+=$'\nalias ll="ls -blg"'
    fi
    eza_al+=$'\nalias l="ll -B"               # Long format, Byte size'
    eza_al+=$'\nalias la="ll -a"              # Long format, all files'
    eza_al+=$'\nalias lr="ll -T"              # Long format, recursive as a tree'
    eza_al+=$'\nalias lx="ll -sextension"     # Long format, sort by extension'
    eza_al+=$'\nalias lk="ll -ssize"          # Long format, largest file size last'
    eza_al+=$'\nalias lt="ll -smodified"      # Long format, newest modification time last'
    eza_al+=$'\nalias lc="ll -schanged"       # Long format, newest status change (ctime) last'

    cat >> $generate_file << EOF
$eza_al

EOF
    _list_cmd='eza --group-directories-first -A -blg'
else
    if ls --color=auto /dev/null &>/dev/null; then
        cat >> $generate_file << 'EOF'
[[ -z "$LS_OPTIONS" ]] && export LS_OPTIONS="--color=auto"
alias ls="ls -A $LS_OPTIONS"
alias ll="ls -AlFh"
alias l="ls -AlF"
alias la="ls -alF"

EOF
    else
        cat >> $generate_file << 'EOF'
alias ls="ls -A"
alias ll="ls -AlFh"
alias l="ls -AlF"
alias la="ls -alF"

EOF
    _list_cmd='ls -AlFh $LS_OPTIONS'
    fi
fi
## eza/ls ]]]

## package management command [[[
if _dotzsh_cmd_exists pacman; then
    if [ $(id -u) -eq 0 ]; then
        _cmd=pacman
    else
        if _dotzsh_cmd_exists yay; then
            _cmd=yay
        elif _dotzsh_cmd_exists paru; then
            _cmd=paru
        else
            _cmd=pacman
        fi
    fi
    cat >> $generate_file << EOF
alias pkgsy="$_cmd -S --noconfirm"
alias pkgr="$_cmd -R"
alias pkgssq="$_cmd -Ssq"
alias pkgss="$_cmd -Ss"
alias pkgsi="$_cmd -Si"
alias pkgqs="$_cmd -Qs"
alias pkgqi="$_cmd -Qi"
alias pkgqo="$_cmd -Qo"
## list files of local package without directory
pkgql() {
    $_cmd -Ql \$1 | grep -Ev '/\$' | awk '{print\$NF}' | xargs $_list_cmd
}
pkgssw() {
    $_cmd -Ss "^\${1}$"
}

EOF
elif _dotzsh_cmd_exists apt; then
    _cmd=apt
    cat >> $generate_file << EOF
alias pkgsy="$_cmd install -y"
alias pkgr="$_cmd remove"
alias pkgss="$_cmd search"
alias pkgsi="$_cmd show"
alias pkgqi="dpkg -s"
pkgqo() {
    which \$1 | xargs dpkg -S
}
## list files of local package without directory
pkgql() {
    dpkg -L \$1 | grep -Ev '\.\$' | xargs bash -c 'for ele do test ! -d \$ele && echo \$ele; done | xargs $_list_cmd' {}
}
pkgqs() {
    $_cmd list --installed 2>/dev/null | grep \$1
}
EOF
elif _dotzsh_cmd_exists apk; then
    _cmd=apk
    ## TODO: May be need improve
    cat >> $generate_file << EOF
alias pkgsy="$_cmd add"
alias pkgr="$_cmd del"
alias pkgss="$_cmd search"

EOF
elif _dotzsh_cmd_exists brew; then
    _cmd=brew
    cat >> $generate_file << EOF
alias pkgsy="$_cmd install"
alias pkgr="$_cmd uninstall"
alias pkgss="$_cmd search"
alias pkgsi="$_cmd info"
alias pkgls="$_cmd list"
alias pkgdep="$_cmd deps"

EOF
fi
## package management command ]]]


some_al=''
if _dotzsh_cmd_exists free; then
    some_al+=$'\nalias free="free -h"'
fi
if _dotzsh_cmd_exists trash; then
    some_al+=$'\nalias rm="trash"'
fi

if _dotzsh_cmd_exists xclip; then
    some_al+=$'\nalias pbcopy="xclip -selection clipboard"\nalias pbpaste="xclip -selection clipboard -o"'
fi

if _dotzsh_cmd_exists rg; then
    some_al+=$'\nalias rga="rg -i --no-ignore"'
fi

if _dotzsh_cmd_exists fzf && _dotzsh_cmd_exists bat; then
    some_al+=$'\nalias fzf="fzf --preview '\''bat --color=always --style=header,grid --line-range :500 {}'\''"'
fi

if _dotzsh_cmd_exists tree; then
    some_al+=$'\nalias trelh="tree -AlFh"\nalias treds="tree -hF --du --sort=size | more"'
fi

if _dotzsh_cmd_exists dust; then
    some_al+=$'\nalias dur="dust -sr"\nalias durd="dust -srb -d 1"'
fi

if _dotzsh_cmd_exists aria2c; then
    some_al+=$'\nalias ar2c="aria2c -x 8 -s 6 -j 8"'
fi

if _dotzsh_cmd_exists fd; then
    some_al+=$'\nalias fdf="fd -t f -H -I --exclude={.git,.svn,.vscode,.vs,.vscode-server,.idea,.github,node_modules,target,build,dist}"'
    some_al+=$'\nfdw() {
    fd -H -I "^${1}$" ${2}
}'
fi

cat >> $generate_file << EOF
$some_al
EOF

unset OS_TYPE _dotzsh_is_linux real_location current_dir full_filename strip_in_name generate_file _cmd _list_cmd eza_al some_al

# vim:fdm=marker:fmr=[[[,]]]
